# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CenterInput {
  latitude: Float!
  longitude: Float!
}

type Contract {
  _id: ID!
  items: [ContractItem!]!
  number: String!
}

type ContractItem {
  currency: Currency!
  product: Product!
  quantity: Int!
  remain: Int!
  unit_price: Int!
}

type Coordinates {
  latitude: Float!
  longitude: Float!
}

input CreateContractInput {
  items: [CreateContractItemInput!]!
  number: String!
}

input CreateContractItemInput {
  currency: String
  product: String!
  qty: Float
  unit_price: Float!
}

input CreateProductInput {
  name: String!
}

enum Currency {
  CNY
}

type Customer {
  _id: ID!
  location: Location
  name: String!
  phones: [String!]!
  type: CustomerType!
}

input CustomerInput {
  location: LocationInput
  name: String!
  phones: [String!]!
}

enum CustomerType {
  NORMAL
}

type Location {
  city: String!
  district: String!
  province: String!
  street: String
}

input LocationInput {
  city: String!
  district: String!
  province: String!
  street: String
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createContract(createContractInput: CreateContractInput!): Contract!
  createCustomer(customerInput: CustomerInput!): Customer!
  createProduct(createProductInput: CreateProductInput!): Product!
  createRegion(regionInput: RegionInput!): Region!
  createUser(userInput: UserInput!): User!
  insertRegions(regionsInput: RegionsInput!): PaginatedRegion!
  login(loginInput: LoginInput!): Token!
  refreshToken(token: String!): Token!
}

type PaginatedCustomer {
  hasNextPage: Boolean!
  nodes: [Customer!]
  totalCount: Int!
  totalPages: Int!
}

type PaginatedRegion {
  hasNextPage: Boolean!
  nodes: [Region!]
  totalCount: Int!
  totalPages: Int!
}

type PaginatedUser {
  hasNextPage: Boolean!
  nodes: [User!]
  totalCount: Int!
  totalPages: Int!
}

type Product {
  _id: ID!
  name: String!
  unit: ProductUnit!
  weight: Int!
}

enum ProductUnit {
  K
  KG
  L
  ML
  T
}

type Query {
  contract(id: String!): Contract!
  contracts(limit: Int = 10, number: String, offset: Int = 0): [Contract!]!
  currentUser: User!
  customer(id: String!): Customer!
  customers(keywords: RegExp, limit: Int = 10, offset: Int = 0): PaginatedCustomer!
  product(id: String!): Product!
  products(limit: Int = 10, name: String, offset: Int = 0): [Product!]!
  region(id: String!): Region!
  regions(keywords: RegExp, limit: Int = 10, offset: Int = 0, parent: ID): PaginatedRegion!
  user(id: String!): User!
  users(limit: Int = 10, offset: Int = 0, username: RegExp): PaginatedUser!
}

"""Regular Expression custom scalar type"""
scalar RegExp

type Region {
  _id: ID!
  center: Coordinates
  children: [Region!]!
  level: RegionLevel!
  name: String!
  parent: Region
}

input RegionInput {
  _id: String!
  center: CenterInput!
  children: [ID!]!
  level: RegionLevel!
  name: String!
  parent: ID
}

enum RegionLevel {
  CITY
  COUNTRY
  DISTRICT
  PROVINCE
  STREET
}

input RegionsInput {
  nodes: [RegionInput!]!
}

type Token {
  access_token: String!
}

type User {
  _id: ID!
  email: String!
}

input UserInput {
  username: String!
}
